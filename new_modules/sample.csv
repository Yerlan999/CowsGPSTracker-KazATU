first
dates_to_analyze = [
    '2023-05-02',
    '2023-05-05',
    '2023-05-07',
    '2023-05-10',
    '2023-05-12',
    '2023-05-15',
    '2023-05-17',
    '2023-05-20',
    '2023-05-22',
]

second
dates_to_analyze = [
    '2023-05-30',
    '2023-06-01',
    '2023-06-04',
    '2023-06-06',
    '2023-06-09',
    '2023-06-11',
    '2023-06-14',
]

third
dates_to_analyze = [
    '2021-08-13',
    '2021-08-15',
    '2021-08-18',
    '2021-08-20',
    '2021-08-23',
    '2021-08-25',
]

fourth
dates_to_analyze = [
    '2021-05-12',
    '2021-05-15',
    '2021-05-17',
    '2021-05-20',
    '2021-05-22',
    '2021-05-25',
]


fifth
dates_to_analyze = [
    '2020-05-02',
    '2020-05-05',
    '2020-05-07',
    '2020-05-10',
    '2020-05-12',
]

General
dates_to_analyze = [

    '2017-06-17',
    '2017-06-27',
    '2017-07-17',
    '2017-07-27',
    '2017-08-01',
    '2017-08-11',
    '2017-08-16',
    '2017-08-26',
    '2017-08-29',
    '2017-08-31',

    '2018-05-23',
    '2018-05-28',
    '2018-06-07',
    '2018-07-02',
    '2018-08-06',
    '2018-08-14',

    '2019-05-01',
    '2019-05-03',
    '2019-05-08',
    '2019-05-28',
    '2019-06-12',
    '2019-07-07',
    '2019-07-12',
    '2019-07-27',
    '2019-08-11',
    '2019-08-14',
    '2019-08-24',

    '2020-05-07',
    '2020-05-12',
    '2020-05-27',
    '2020-06-06',
    '2020-06-16',
    '2020-07-06',
    '2020-07-16',
    '2020-07-29',
    '2020-08-03',
    '2020-08-05',
    '2020-08-28',
    '2020-08-30',

    '2021-05-02',
    '2021-05-07',
    '2021-05-15',
    '2021-05-17',
    '2021-05-22',
    '2021-06-06',
    '2021-06-16',
    '2021-06-26',
    '2021-07-01',
    '2021-07-21',
    '2021-07-26',
    '2021-07-31',
    '2021-08-13',
    '2021-08-15',
    '2021-08-18',
    '2021-08-20',
    '2021-08-23',
    '2021-08-25',
    '2021-08-30',

    '2022-05-07',
    '2022-05-12',
    '2022-06-01',
    '2022-07-01',
    '2022-07-26',
    '2022-08-03',
    '2022-08-05',
    '2022-08-10',
    '2022-08-13',
    '2022-08-25',
    '2022-08-28',
    '2022-08-30',

    '2023-05-02',
    '2023-05-05',
    '2023-05-07',
    '2023-05-12',
    '2023-05-17',
    '2023-05-22',
    '2023-06-06',
    '2023-06-11',
    '2023-07-01',
    '2023-07-11',
    '2023-07-26',
    '2023-08-18',
    '2023-08-20',
    '2023-08-23',
]







### OLD CATTLE CLASS

class Cattle():
    cattle_count = 0
    cattle_stack = []

    def __init__(self, sex, weight, stage=None, production=None, age=None, forage_to_gain=0.25):
#         self.breed = breed           # Порода
        self.sex = sex               # Пол: Корова/Бык
        self.production = production # Направление: Молочное/Мясное
        self.age = age               # Возраст
        self.stage = stage           # Стадия/период
        self.weight = weight         # Начальный вес

        self.current_paddock = None
        self.day_entered = None

        self.gps_coordinate = None

        self.already_consumed_forage = 0
        self.forage_needed = None
        self.forage_to_gain = forage_to_gain # 1 кг сухой массы = 0.25 кг прирост в массе

        self.forage_needed = dry_matter_intake(self.weight, "Angus")

        Cattle.cattle_count += 1
        Cattle.cattle_stack.append(self)
        self.index = Cattle.cattle_count

    def __str__(self):
        return f'Cattle №{self.index}. Already consumed: {self.already_consumed_forage} kg. In the paddock №{self.current_paddock} right now.'
    def __repr__(self):
        return f'Cattle №{self.index}. Already consumed: {self.already_consumed_forage} kg. In the paddock №{self.current_paddock} right now.'

    def enter_into_paddock(new_paddock_number):
        self.current_paddock = new_paddock_number
        self.day_entered = datetime.datetime.today()

    def calculate_forage_needed(self):
        # Быки
        if self.sex == "male":
            min_weight = 600
            max_weight = 1400

            min_forage_needed = 9
            max_forage_needed = 15

            forage_needed = (self.weight - min_weight) / (max_weight - min_weight) * (max_forage_needed - min_forage_needed) + min_forage_needed
            return forage_needed

        # Коровы
        else:
            if self.stage == "lactating": # Лактирующие
                min_weight = 350
                max_weight = 650

                min_forage_needed = 9
                max_forage_needed = 14

                forage_needed = (self.weight - min_weight) / (max_weight - min_weight) * (max_forage_needed - min_forage_needed) + min_forage_needed
                return forage_needed

            else: # Сухостойная или остальные
                min_weight = 400
                max_weight = 650

                min_forage_needed = 12
                max_forage_needed = 14

                forage_needed = (self.weight - min_weight) / (max_weight - min_weight) * (max_forage_needed - min_forage_needed) + min_forage_needed
                return forage_needed

    def get_gps_coordinate_request(self):
        # Making a request to intermediate module of the system
        # Obtaining GPS coordinates of an interested cattle
        self.gps_coordinate = (0, 0)
        return self.gps_coordinate

    def get_cattle_current_gps_coordinates(self):
        gps_coordinate = self.get_gps_coordinate_request()
        curr_coord_y, curr_coord_x = gps_coordinate # (Latitude, Longitude) = (54.216885, 69.517046)
        x = int(np.interp(curr_coord_x, [x_min, x_max], [0, aoi_width])) # 157
        y = int(np.interp(curr_coord_y, [y_min, y_max], [aoi_height, 0])) # 78

        print(f"Координаты: {curr_coord_y}, {curr_coord_x} || Пиксельный эквивалент: {y}, {x}")
        for i, paddock in enumerate(masks, start=1):
            if not paddock.reshape(aoi_height, aoi_width)[y, x]:
                self.current_paddock = i
            else:
                self.current_paddock = None
