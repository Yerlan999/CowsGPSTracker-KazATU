#include <Arduino.h>

SemaphoreHandle_t sem;

volatile int sharedVariable = 0; // Variable to be shared between cores

// Function to run on core 0
void taskCore0(void *parameter) {
  while (1) {
    xSemaphoreTake(sem, portMAX_DELAY); // Take the semaphore to access the sharedVariable
    sharedVariable++;
    xSemaphoreGive(sem); // Release the semaphore

    delay(1000);
  }
}

// Function to run on core 1
void taskCore1(void *parameter) {
  while (1) {
    xSemaphoreTake(sem, portMAX_DELAY); // Take the semaphore to access the sharedVariable
    int value = sharedVariable;
    xSemaphoreGive(sem); // Release the semaphore

    Serial.print("Task on Core 1 - Shared Variable: ");
    Serial.println(value);

    delay(1000);
  }
}

void setup() {
  Serial.begin(115200);

  // Create a semaphore
  sem = xSemaphoreCreateMutex();

  // Create a task on Core 0
  xTaskCreatePinnedToCore(
    taskCore0,
    "Task_Core_0",
    10000,
    NULL,
    1,
    NULL,
    0
  );

  // Create a task on Core 1
  xTaskCreatePinnedToCore(
    taskCore1,
    "Task_Core_1",
    10000,
    NULL,
    1,
    NULL,
    1
  );
}

void loop() {
  // Main loop code (can be empty as tasks are running on separate cores)
}
